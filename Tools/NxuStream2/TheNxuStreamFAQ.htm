<html xmlns:o="urn:schemas-microsoft-com:office:office"
xmlns:w="urn:schemas-microsoft-com:office:word"
xmlns:st1="urn:schemas-microsoft-com:office:smarttags"
xmlns="http://www.w3.org/TR/REC-html40">

<head>
<meta http-equiv=Content-Type content="text/html; charset=windows-1252">
<meta name=ProgId content=Word.Document>
<meta name=Generator content="Microsoft Word 11">
<meta name=Originator content="Microsoft Word 11">
<link rel=File-List href="The%20NxuStream%20FAQ_files/filelist.xml">
<title>The NxuStream FAQ</title>
<o:SmartTagType namespaceuri="urn:schemas-microsoft-com:office:smarttags"
 name="PersonName"/>
<!--[if gte mso 9]><xml>
 <o:DocumentProperties>
  <o:Author>jratcliff</o:Author>
  <o:LastAuthor>jratcliff</o:LastAuthor>
  <o:Revision>3</o:Revision>
  <o:TotalTime>79</o:TotalTime>
  <o:Created>2006-09-01T18:49:00Z</o:Created>
  <o:LastSaved>2007-01-04T14:47:00Z</o:LastSaved>
  <o:Pages>1</o:Pages>
  <o:Words>1867</o:Words>
  <o:Characters>10648</o:Characters>
  <o:Lines>88</o:Lines>
  <o:Paragraphs>24</o:Paragraphs>
  <o:CharactersWithSpaces>12491</o:CharactersWithSpaces>
  <o:Version>11.8107</o:Version>
 </o:DocumentProperties>
</xml><![endif]--><!--[if gte mso 9]><xml>
 <w:WordDocument>
  <w:SpellingState>Clean</w:SpellingState>
  <w:GrammarState>Clean</w:GrammarState>
  <w:PunctuationKerning/>
  <w:ValidateAgainstSchemas/>
  <w:SaveIfXMLInvalid>false</w:SaveIfXMLInvalid>
  <w:IgnoreMixedContent>false</w:IgnoreMixedContent>
  <w:AlwaysShowPlaceholderText>false</w:AlwaysShowPlaceholderText>
  <w:Compatibility>
   <w:BreakWrappedTables/>
   <w:SnapToGridInCell/>
   <w:WrapTextWithPunct/>
   <w:UseAsianBreakRules/>
   <w:DontGrowAutofit/>
  </w:Compatibility>
  <w:BrowserLevel>MicrosoftInternetExplorer4</w:BrowserLevel>
 </w:WordDocument>
</xml><![endif]--><!--[if gte mso 9]><xml>
 <w:LatentStyles DefLockedState="false" LatentStyleCount="156">
 </w:LatentStyles>
</xml><![endif]--><!--[if !mso]><object
 classid="clsid:38481807-CA0E-42D2-BF39-B33AF135CC4D" id=ieooui></object>
<style>
st1\:*{behavior:url(#ieooui) }
</style>
<![endif]-->
<style>
<!--
 /* Font Definitions */
 @font-face
	{font-family:"Trebuchet MS";
	panose-1:2 11 6 3 2 2 2 2 2 4;
	mso-font-charset:0;
	mso-generic-font-family:swiss;
	mso-font-pitch:variable;
	mso-font-signature:647 0 0 0 159 0;}
 /* Style Definitions */
 p.MsoNormal, li.MsoNormal, div.MsoNormal
	{mso-style-parent:"";
	margin:0in;
	margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	font-size:12.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";}
a:link, span.MsoHyperlink
	{color:blue;
	text-decoration:underline;
	text-underline:single;}
a:visited, span.MsoHyperlinkFollowed
	{color:purple;
	text-decoration:underline;
	text-underline:single;}
span.SpellE
	{mso-style-name:"";
	mso-spl-e:yes;}
span.GramE
	{mso-style-name:"";
	mso-gram-e:yes;}
@page Section1
	{size:8.5in 11.0in;
	margin:1.0in 1.25in 1.0in 1.25in;
	mso-header-margin:.5in;
	mso-footer-margin:.5in;
	mso-paper-source:0;}
div.Section1
	{page:Section1;}
-->
</style>
<!--[if gte mso 10]>
<style>
 /* Style Definitions */
 table.MsoNormalTable
	{mso-style-name:"Table Normal";
	mso-tstyle-rowband-size:0;
	mso-tstyle-colband-size:0;
	mso-style-noshow:yes;
	mso-style-parent:"";
	mso-padding-alt:0in 5.4pt 0in 5.4pt;
	mso-para-margin:0in;
	mso-para-margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	font-size:10.0pt;
	font-family:"Times New Roman";
	mso-ansi-language:#0400;
	mso-fareast-language:#0400;
	mso-bidi-language:#0400;}
</style>
<![endif]-->
</head>

<body lang=EN-US link=blue vlink=purple style='tab-interval:.5in'>

<div class=Section1>

<p class=MsoNormal align=center style='text-align:center'><b style='mso-bidi-font-weight:
normal'><span style='font-size:28.0pt;font-family:"Trebuchet MS"'>The <span
class=SpellE>NxuStream</span> FAQ<o:p></o:p></span></b></p>

<p class=MsoNormal align=center style='text-align:center'><b style='mso-bidi-font-weight:
normal'><span style='font-size:28.0pt;font-family:"Trebuchet MS"'><o:p>&nbsp;</o:p></span></b></p>

<p class=MsoNormal><b style='mso-bidi-font-weight:normal'><span
style='font-family:"Trebuchet MS"'>What is <span class=SpellE>NxuStream</span>?</span></b><span
style='font-family:"Trebuchet MS"'><span style='mso-spacerun:yes'>  </span><span
class=SpellE>NxuStream</span> is a serialization library for the <span
class=SpellE>Ageia</span> <span class=SpellE>PhysX</span> SDK.<span
style='mso-spacerun:yes'>  </span>The <span class=SpellE>Ageia</span> <span
class=SpellE>PhysX</span> SDK uses a data driven approach to create objects for
the simulation.<span style='mso-spacerun:yes'>  </span>Rather than creating a rigid
body and then calling numerous methods to configure it, instead all of the data
needed to define the properties of a rigid body are placed into a data
structure called a ‘descriptor’ and submitted in a single creation call.<o:p></o:p></span></p>

<p class=MsoNormal><span style='font-family:"Trebuchet MS"'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal><span style='font-family:"Trebuchet MS"'>The <span
class=SpellE>PhysX</span> SDK likewise offers an API method that will save the
current state of an object back out to this data structure so that a developer
can preserve the state.<o:p></o:p></span></p>

<p class=MsoNormal><span style='font-family:"Trebuchet MS"'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal><span style='font-family:"Trebuchet MS"'>Since there are
somewhere on the order of over 1,200 unique data items that can be represented
in the <span class=SpellE>Ageia</span> <span class=SpellE>PhysX</span> SDK
(this include every single bit flag and enumerated type) it takes a substantial
development effort to read and write all of this state to and from single data
resource.<o:p></o:p></span></p>

<p class=MsoNormal><span style='font-family:"Trebuchet MS"'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal><span class=SpellE><span style='font-family:"Trebuchet MS"'>NxuStream</span></span><span
style='font-family:"Trebuchet MS"'> will take all or any sub-portion of the
contents of the SDK and copy them to a collection of descriptors (referred to
as an ‘<span class=SpellE>NxuPhysicsCollection</span>’) and then can save this
collection to a number of file formats.<span style='mso-spacerun:yes'> 
</span>It can also read that collection back into memory and, finally,
instantiate it onto the SDK.<o:p></o:p></span></p>

<p class=MsoNormal><span style='font-family:"Trebuchet MS"'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal><span style='font-family:"Trebuchet MS"'>The uses for this
include capturing a single object, an entire scene, or the whole SDK to a file
for debugging purposes.<span style='mso-spacerun:yes'>  </span>These files can
also be sent back to technical <st1:PersonName w:st="on">support</st1:PersonName>
to help diagnose problems.<o:p></o:p></span></p>

<p class=MsoNormal><span style='font-family:"Trebuchet MS"'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal><span style='font-family:"Trebuchet MS"'>Probably the most
exciting use for <span class=SpellE>NxuStream</span> is to represent discrete
data assets for your game.<span style='mso-spacerun:yes'>  </span>Combining the
<span class=SpellE>NxuStream</span> data with authoring tools such as <span
class=SpellE>CreateDynamics</span>, 3D Studio Max or Maya can be very
powerful.<span style='mso-spacerun:yes'>  </span><o:p></o:p></span></p>

<p class=MsoNormal><span style='font-family:"Trebuchet MS"'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal><span class=SpellE><span style='font-family:"Trebuchet MS"'>NxuPhysicsCollections</span></span><span
style='font-family:"Trebuchet MS"'> can be instantiated at any location in the
world.<span style='mso-spacerun:yes'>  </span>In this fashion you could have a
single data asset that represents an object like a ‘tree’ or a ‘<span
class=SpellE>ragdoll</span>’ and then place then instantiate them all over a
game environment.<o:p></o:p></span></p>

<p class=MsoNormal><span style='font-family:"Trebuchet MS"'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal><b style='mso-bidi-font-weight:normal'><span
style='font-family:"Trebuchet MS"'>How do I use the library?<span
style='mso-spacerun:yes'>  </span></span></b><span class=SpellE><span
style='font-family:"Trebuchet MS"'>NxuStream</span></span><span
style='font-family:"Trebuchet MS"'> is delivered as a collection of source code
that can compile against all versions of the <span class=SpellE>PhysX</span>
SDK 2.4.0 and higher.<span style='mso-spacerun:yes'>  </span>Simply add the
source code to your project (make sure your include paths are set up to point
to the <span class=SpellE>PhysX</span> SDK) and build.<o:p></o:p></span></p>

<p class=MsoNormal><span style='font-family:"Trebuchet MS"'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal><span style='font-family:"Trebuchet MS"'>Only a single
header file is needed to take advantage of the <span class=SpellE>NxuStream</span>
API.<span style='mso-spacerun:yes'>  </span>Simply include ‘<span class=SpellE>NXU_Helper.h</span>’
and make a few calls.<o:p></o:p></span></p>

<p class=MsoNormal><span style='font-family:"Trebuchet MS"'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal><span style='font-family:"Trebuchet MS"'>The <span
class=SpellE>NxuStream</span> library needs a small amount of persistent memory
to keep track of name fields and the instantiation of mesh assets.<span
style='mso-spacerun:yes'>  </span>To release this memory your application
should, on exit or any time you do a full reset of the SDK, call ‘<span
class=SpellE>NXU:<span class=GramE>:releasePersistentMemory</span></span><span
class=GramE>’</span>.<o:p></o:p></span></p>

<p class=MsoNormal><span style='font-family:"Trebuchet MS"'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal><b style='mso-bidi-font-weight:normal'><span
style='font-family:"Trebuchet MS"'>Why isn’t it just part of the SDK?</span></b><span
style='font-family:"Trebuchet MS"'><span style='mso-spacerun:yes'>  </span><span
class=SpellE>NxuStream</span> is a tool that, even though it is tightly bound
to the SDK, is also independent of any specific version.<span
style='mso-spacerun:yes'>  </span>The goal is to target past and future
releases of the SDK with the same code base.<span style='mso-spacerun:yes'> 
</span>This kind of backwards and forwards compatibility is critically
important to help maintain data assets.<o:p></o:p></span></p>

<p class=MsoNormal><span style='font-family:"Trebuchet MS"'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal><span style='font-family:"Trebuchet MS"'>Another reason not
to put <span class=SpellE>NxuStream</span> directly into the SDK is because it
is a rather large code base and not everyone is going to want to use it in
their product.<o:p></o:p></span></p>

<p class=MsoNormal><span style='font-family:"Trebuchet MS"'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal><span style='font-family:"Trebuchet MS"'>It is also quite
possible that <span class=SpellE>NxuStream</span> would be revised independent
of the SDK release schedule since new features such as COLLADA improvements
would be unrelated to the SDK directly.<o:p></o:p></span></p>

<p class=MsoNormal><span style='font-family:"Trebuchet MS"'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal><b style='mso-bidi-font-weight:normal'><span
style='font-family:"Trebuchet MS"'>Why is it delivered as source code instead
of a DLL or library? </span></b><span class=SpellE><span style='font-family:
"Trebuchet MS"'>NxuStream</span></span><span style='font-family:"Trebuchet MS"'>
is delivered as source code to provide the maximum flexibility for developers
to incorporate it into their project.<span style='mso-spacerun:yes'>  </span>Of
course it could be easily placed into a library or DLL by any individual
developer if they wanted to.<o:p></o:p></span></p>

<p class=MsoNormal><span style='font-family:"Trebuchet MS"'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal><span style='font-family:"Trebuchet MS"'>Since <span
class=SpellE>NxuStream</span> is entirely tools related code it is valuable for
a developer to easily step into the source code when debugging or binding it to
their own system.<span style='mso-spacerun:yes'>  </span>It is also quite
likely that some developers will choose to place the <span class=SpellE>NxuStream</span>
code into part of their tools chain as part of a game editor or used in plug-in
components.<o:p></o:p></span></p>

<p class=MsoNormal><span style='font-family:"Trebuchet MS"'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal><span style='font-family:"Trebuchet MS"'>The <span
class=SpellE>NxuStream</span> source code is entirely inside a namespace ‘NXU’
so it should have no conflicts with other source in an application.<o:p></o:p></span></p>

<p class=MsoNormal><span style='font-family:"Trebuchet MS"'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal><b style='mso-bidi-font-weight:normal'><span
style='font-family:"Trebuchet MS"'>Does <span class=SpellE>NxuStream</span> use
the STL?</span></b><span style='font-family:"Trebuchet MS"'><span
style='mso-spacerun:yes'>  </span><span class=SpellE>NxuStream</span> does not
use the STL (Standard Template Library).<span style='mso-spacerun:yes'> 
</span>For containers it simply uses the simple vector template ‘<span
class=SpellE>NxArray</span>’ that is provided by the <span class=SpellE>PhysX</span>
SDK.<o:p></o:p></span></p>

<p class=MsoNormal><span style='font-family:"Trebuchet MS"'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal><span style='font-family:"Trebuchet MS"'>However, even
though <span class=SpellE>NxuStream</span> does not use the STL is still does
quite a few memory allocations using the standard ‘new’ and ‘delete’
operator.<span style='mso-spacerun:yes'>   </span><o:p></o:p></span></p>

<p class=MsoNormal><span style='font-family:"Trebuchet MS"'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal><b style='mso-bidi-font-weight:normal'><span
style='font-family:"Trebuchet MS"'>How much source code is in <span
class=SpellE>NxuStream</span>? </span></b><span class=SpellE><span
style='font-family:"Trebuchet MS"'>NxuStream</span></span><span
style='font-family:"Trebuchet MS"'> comprises 42 source files, 22 CPP files and
20 header files.<o:p></o:p></span></p>

<p class=MsoNormal><span style='font-family:"Trebuchet MS"'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal><span style='font-family:"Trebuchet MS"'>This contains
33,308 lines total which breaks down as:<o:p></o:p></span></p>

<p class=MsoNormal><span style='font-family:"Trebuchet MS"'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal><span class=GramE><span style='font-family:"Trebuchet MS"'>25,761
lines of code.</span></span><span style='font-family:"Trebuchet MS"'><o:p></o:p></span></p>

<p class=MsoNormal><span style='font-family:"Trebuchet MS"'><span
style='mso-spacerun:yes'>  </span>4,510 empty lines.<o:p></o:p></span></p>

<p class=MsoNormal><span style='font-family:"Trebuchet MS"'><span
style='mso-spacerun:yes'> </span>2,066 comment lines.<o:p></o:p></span></p>

<p class=MsoNormal><span style='font-family:"Trebuchet MS"'><span
style='mso-spacerun:yes'>    </span>971 empty comment lines.<o:p></o:p></span></p>

<p class=MsoNormal><span style='font-family:"Trebuchet MS"'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal><b style='mso-bidi-font-weight:normal'><span
style='font-family:"Trebuchet MS"'>Why is there so much source code?<o:p></o:p></span></b></p>

<p class=MsoNormal><b style='mso-bidi-font-weight:normal'><span
style='font-family:"Trebuchet MS"'><o:p>&nbsp;</o:p></span></b></p>

<p class=MsoNormal><span style='font-family:"Trebuchet MS"'>The quantity of
source code simply reflects the amount of data that <span class=SpellE>NxuStream</span>
has to represent.<span style='mso-spacerun:yes'>  </span>It must first be able
to extract all data from the SDK and copy it into an ‘<span class=SpellE>NxuPhysicsCollection</span>’.<span
style='mso-spacerun:yes'>  </span>Next it needs to be able to both read and
write this data in a fault tolerant and human readable way.<span
style='mso-spacerun:yes'>  </span>All memory ownership needs to be taken into
account during this process.<span style='mso-spacerun:yes'>   </span>There is
also code to instantiate the data back into the SDK and this too needs to be
fault tolerant and keep memory ownership into account.<o:p></o:p></span></p>

<p class=MsoNormal><span style='font-family:"Trebuchet MS"'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal><span style='font-family:"Trebuchet MS"'>Finally, the
biggest reason for the quantity of source code <span class=GramE>is having</span>
to <st1:PersonName w:st="on">support</st1:PersonName> both COLLADA and <span
class=SpellE>NxuStream</span> XML; this requires not only an XML parser but also
an interpreter that can filter that XML data and convert it from ASCII into a
binary representation.<o:p></o:p></span></p>

<p class=MsoNormal><span style='font-family:"Trebuchet MS"'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal><span style='font-family:"Trebuchet MS"'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal><b style='mso-bidi-font-weight:normal'><span
style='font-family:"Trebuchet MS"'>What file formats does <span class=SpellE>NxuStream</span>
<st1:PersonName w:st="on">support</st1:PersonName>?<span
style='mso-spacerun:yes'>  </span></span></b><span class=SpellE><span
style='font-family:"Trebuchet MS"'>NxuStream</span></span><span
style='font-family:"Trebuchet MS"'> <st1:PersonName w:st="on">support</st1:PersonName>s
three file formats, XML, BINARY, and COLLADA.<span style='mso-spacerun:yes'> 
</span>The XML and binary versions <span class=GramE>are</span> a true reflective
object model of all of the <span class=SpellE>PhysX</span> SDK data
descriptors.<span style='mso-spacerun:yes'>  </span>What this means is that not
only is all data represented but also, wherever possible, the name of each data
item in the XML is identical to the name found in the data structure.<span
style='mso-spacerun:yes'>  </span>For example if a data structure would have a
member variable called ‘<span class=SpellE>globalPose</span>’ then you can be
sure the XML file will place it inside an element called ‘<span class=SpellE>globalPose</span>’.<span
style='mso-spacerun:yes'>  </span>This one to one correspondence between the
XML file and the SDK makes it much easier to visually debug problems simply by
inspecting the file.<o:p></o:p></span></p>

<p class=MsoNormal><span style='font-family:"Trebuchet MS"'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal><span style='font-family:"Trebuchet MS"'>The COLLADA <st1:PersonName
w:st="on">support</st1:PersonName> is based on the 1.4.1 schema and is limited
to representing physics data only.<span style='mso-spacerun:yes'>  </span><span
class=SpellE>NxuStream</span> does not do anything with the graphics portion of
a COLLADA file.<span style='mso-spacerun:yes'>  </span>If you load a COLLADA
file with both graphics and physics <span class=SpellE>NxuStream</span> will
only concern itself with the physics data.<span style='mso-spacerun:yes'> 
</span>A developer can bind physics objects with graphics or game objects using
either user property fields or names.<o:p></o:p></span></p>

<p class=MsoNormal><span style='font-family:"Trebuchet MS"'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal><b style='mso-bidi-font-weight:normal'><span
style='font-family:"Trebuchet MS"'>What is COLLADA?</span></b><span
style='font-family:"Trebuchet MS"'><span style='mso-spacerun:yes'>  </span>COLLADA
is an industry standard 3d asset interchange format.<span
style='mso-spacerun:yes'>  </span>It is the first such format to provide <st1:PersonName
w:st="on">support</st1:PersonName> for physics content.<span
style='mso-spacerun:yes'>  </span>When using COLLADA, unlike the reflective
formats (XML and binary), not all concepts in the <span class=SpellE>Ageia</span>
<span class=SpellE>PhysX</span> SDK will be preserved.<span
style='mso-spacerun:yes'>   </span>Support is provided for this format to ease
migration from various 3<sup>rd</sup> party authoring solutions that use
COLLDA.<o:p></o:p></span></p>

<p class=MsoNormal><span style='font-family:"Trebuchet MS"'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal><b style='mso-bidi-font-weight:normal'><span
style='font-family:"Trebuchet MS"'>Why are there so many formats? </span></b><span
style='font-family:"Trebuchet MS"'><span style='mso-spacerun:yes'> </span>Each
of these three formats serves a particular need.<o:p></o:p></span></p>

<p class=MsoNormal><span style='font-family:"Trebuchet MS"'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal><i style='mso-bidi-font-style:normal'><span
style='font-family:"Trebuchet MS"'>COLLADA</span></i><span style='font-family:
"Trebuchet MS"'> is useful when working with 3<sup>rd</sup> party authoring
tools that recognize and <st1:PersonName w:st="on">support</st1:PersonName>
this physics authoring in this format.<o:p></o:p></span></p>

<p class=MsoNormal><span style='font-family:"Trebuchet MS"'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal><span class=SpellE><i style='mso-bidi-font-style:normal'><span
style='font-family:"Trebuchet MS"'>NxuStream</span></i></span><i
style='mso-bidi-font-style:normal'><span style='font-family:"Trebuchet MS"'>
XML</span></i><span style='font-family:"Trebuchet MS"'> is useful when
authoring data assets that require complete control over every feature in the <span
class=SpellE>PhysX</span> SDK.<span style='mso-spacerun:yes'>  </span>It is
especially useful for debugging and troubleshooting problems since the XML can
easily be visually inspected.<o:p></o:p></span></p>

<p class=MsoNormal><span style='font-family:"Trebuchet MS"'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal><span class=SpellE><i style='mso-bidi-font-style:normal'><span
style='font-family:"Trebuchet MS"'>NxuStream</span></i></span><i
style='mso-bidi-font-style:normal'><span style='font-family:"Trebuchet MS"'>
Binary</span></i><span style='font-family:"Trebuchet MS"'> is useful for final
production assets for high speed data loading.<span style='mso-spacerun:yes'> 
</span>The binary format <st1:PersonName w:st="on">support</st1:PersonName>s
‘cooked’ data formats that can allow large assets to be loaded into the SDK
nearly instantaneously.<span style='mso-spacerun:yes'>  </span>A drawback of
the binary file format is that it is not forwards or backwards compatible so it
is best to keep the XML version as a reference to ease migration across SDK
releases.<o:p></o:p></span></p>

<p class=MsoNormal><span style='font-family:"Trebuchet MS"'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal><b style='mso-bidi-font-weight:normal'><span
style='font-family:"Trebuchet MS"'>Why aren’t binary files backwards
compatible?</span></b><span style='font-family:"Trebuchet MS"'><span
style='mso-spacerun:yes'>  </span>Since the binary version of the data is
designed to loaded and saved at high speed directly to and from various
descriptor data structures it is extremely challenging to maintain forwards and
backwards compatibility when those data structures change across SDK versions.<span
style='mso-spacerun:yes'>   </span>Additionally any time new features are added
to <span class=SpellE>NxuStream</span> itself it would invalidate the previous
data assets.<o:p></o:p></span></p>

<p class=MsoNormal><span style='font-family:"Trebuchet MS"'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal><span style='font-family:"Trebuchet MS"'>The XML version is
much more flexible and robust and does not suffer from these same
problems.<span style='mso-spacerun:yes'>  </span>It is best to keep source data
in XML and only burn it into a binary cooked file as a production process.<o:p></o:p></span></p>

<p class=MsoNormal><span style='font-family:"Trebuchet MS"'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal><b style='mso-bidi-font-weight:normal'><span
style='font-family:"Trebuchet MS"'>What is ‘cooked’ data?<span
style='mso-spacerun:yes'>  </span></span></b><span style='font-family:"Trebuchet MS"'>‘Cooked’
data represents triangles meshes and convex hulls in a format that the <span
class=SpellE>PhysX</span> SDK can directly operate on.<span
style='mso-spacerun:yes'>  </span>Before a triangle mesh or convex hull can be
submitted to the SDK it must first be ‘cooked’ which involves a lot of
operations to manipulate the source data into an optimal representation for
high speed collision detection.<span style='mso-spacerun:yes'> 
</span>Internally various data structures are built as well as general
cleanup.<span style='mso-spacerun:yes'>  </span>Once data has been ‘cooked’ it
can be loaded into the SDK almost instantaneously.<span
style='mso-spacerun:yes'>  </span><o:p></o:p></span></p>

<p class=MsoNormal><span style='font-family:"Trebuchet MS"'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal><b style='mso-bidi-font-weight:normal'><span
style='font-family:"Trebuchet MS"'>Is <span class=SpellE>NxuStream</span>
multiplatform?</span></b><span style='font-family:"Trebuchet MS"'> Yes, <span
class=SpellE>NxuStream</span> has been tested on Windows, <span class=GramE>Unix</span>,
and an XBOX-360.<span style='mso-spacerun:yes'>  </span><o:p></o:p></span></p>

<p class=MsoNormal><span style='font-family:"Trebuchet MS"'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal><b style='mso-bidi-font-weight:normal'><span
style='font-family:"Trebuchet MS"'>What XML parser does <span class=SpellE>NxuStream</span>
use?</span></b><span style='font-family:"Trebuchet MS"'> <span class=SpellE>NxuStream</span>
uses the ‘<span class=SpellE>TinyXML</span>’ parser to load XML data
assets.<span style='mso-spacerun:yes'>  </span><span class=SpellE>TinyXML</span>,
as the name implies, is very tiny.<span style='mso-spacerun:yes'>  </span>It is
a stable, robust, and fast DOM XML parser in only a few thousand lines of
code.<span style='mso-spacerun:yes'>  </span>This implementation of <span
class=SpellE>TinyXML</span> has been wrapped into a namespace and redirects
file IO to <st1:PersonName w:st="on">support</st1:PersonName> reading to and
from a buffer in memory.<o:p></o:p></span></p>

<p class=MsoNormal><span style='font-family:"Trebuchet MS"'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal><b style='mso-bidi-font-weight:normal'><span
style='font-family:"Trebuchet MS"'>What is the purpose of the individual source
files provided?<o:p></o:p></span></b></p>

<p class=MsoNormal><span style='font-family:"Trebuchet MS"'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal><span class=SpellE><i style='mso-bidi-font-style:normal'><u><span
style='font-family:"Trebuchet MS"'>NXU_Helper.cpp</span></u></i></span><i
style='mso-bidi-font-style:normal'><u><span style='font-family:"Trebuchet MS"'>
and <span class=SpellE>NXU_Helper.h</span><o:p></o:p></span></u></i></p>

<p class=MsoNormal><span style='font-family:"Trebuchet MS"'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal><span style='font-family:"Trebuchet MS"'>This is the main
public interface to <span class=SpellE>NxuStream</span>.<span
style='mso-spacerun:yes'>  </span>An application should only ever need to
include this single header file to have access to all of the functionality
needed.<o:p></o:p></span></p>

<p class=MsoNormal><span style='font-family:"Trebuchet MS"'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal><u><span style='font-family:"Trebuchet MS"'>NXU_Asc2Bin.cpp
and NXU_Asc2Bin.h<o:p></o:p></span></u></p>

<p class=MsoNormal><span style='font-family:"Trebuchet MS"'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal><span style='font-family:"Trebuchet MS"'>This is a utility
that helps convert ASCII data into a binary representation.<o:p></o:p></span></p>

<p class=MsoNormal><span style='font-family:"Trebuchet MS"'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal><span class=SpellE><u><span style='font-family:"Trebuchet MS"'>NXU_BinaryStream.cpp</span></u></span><u><span
style='font-family:"Trebuchet MS"'> and <span class=SpellE>NXU_BinaryStream.h</span><o:p></o:p></span></u></p>

<p class=MsoNormal><span style='font-family:"Trebuchet MS"'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal><span style='font-family:"Trebuchet MS"'>This is the implementation
of the stream class to read and write the binary version of the data.<span
style='mso-spacerun:yes'>  </span><span class=SpellE>NxuStream</span> uses a
pure virtual interface so that reading and writing both binary and the XML
versions is largely the same code.<o:p></o:p></span></p>

<p class=MsoNormal><span style='font-family:"Trebuchet MS"'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal><span class=SpellE><u><span style='font-family:"Trebuchet MS"'>NXU_ColladaExport.cpp</span></u></span><u><span
style='font-family:"Trebuchet MS"'> and <span class=SpellE>NXU_ColladaExport.h</span><o:p></o:p></span></u></p>

<p class=MsoNormal><span style='font-family:"Trebuchet MS"'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal><span style='font-family:"Trebuchet MS"'>This code saves out
the contents of an <span class=SpellE>NxuPhysicsCollection</span> to a COLLADA
1.4.1 physics file.<o:p></o:p></span></p>

<p class=MsoNormal><span style='font-family:"Trebuchet MS"'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal><u><span lang=FR style='font-family:"Trebuchet MS";
mso-ansi-language:FR'>NXU_ColladaImport.cpp <span class=SpellE>NXU_ColladaImport.h</span><o:p></o:p></span></u></p>

<p class=MsoNormal><span lang=FR style='font-family:"Trebuchet MS";mso-ansi-language:
FR'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal><span style='font-family:"Trebuchet MS"'>This source parses
a COLLADA file and extracts all of the relevant physics content.<span
style='mso-spacerun:yes'>  </span>This physics data is then <span class=GramE>copied<span
style='mso-spacerun:yes'>  </span>to</span> an <span class=SpellE>NxuPhysicsCollection</span>.<o:p></o:p></span></p>

<p class=MsoNormal><span style='font-family:"Trebuchet MS"'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal><span class=SpellE><u><span style='font-family:"Trebuchet MS"'>NXU_Cooking.cpp</span></u></span><u><span
style='font-family:"Trebuchet MS"'> and <span class=SpellE>NXU_Cooking.h</span><o:p></o:p></span></u></p>

<p class=MsoNormal><span style='font-family:"Trebuchet MS"'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal><span style='font-family:"Trebuchet MS"'>This is a utility
that invokes the version controlled cooking library.<o:p></o:p></span></p>

<p class=MsoNormal><span style='font-family:"Trebuchet MS"'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal><span class=SpellE><u><span style='font-family:"Trebuchet MS"'>NXU_File.cpp</span></u></span><u><span
style='font-family:"Trebuchet MS"'> and <span class=SpellE>NXU_File.h</span><o:p></o:p></span></u></p>

<p class=MsoNormal><u><span style='font-family:"Trebuchet MS"'><o:p><span
 style='text-decoration:none'>&nbsp;</span></o:p></span></u></p>

<p class=MsoNormal><span style='font-family:"Trebuchet MS"'>This is a utility
that can vector standard file IO routines to a buffer in memory if needed.<o:p></o:p></span></p>

<p class=MsoNormal><span style='font-family:"Trebuchet MS"'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal><span class=SpellE><u><span style='font-family:"Trebuchet MS"'>NXU_Geometry.cpp</span></u></span><u><span
style='font-family:"Trebuchet MS"'> and <span class=SpellE>NXU_Geometry.h</span><o:p></o:p></span></u></p>

<p class=MsoNormal><span style='font-family:"Trebuchet MS"'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal><span style='font-family:"Trebuchet MS"'>This is a utility
that can build a <span class=SpellE>renderable</span> mesh from primitives such
as box, sphere, or capsule.<o:p></o:p></span></p>

<p class=MsoNormal><span style='font-family:"Trebuchet MS"'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal><span class=SpellE><u><span style='font-family:"Trebuchet MS"'>NXU_Hull.cpp</span></u></span><u><span
style='font-family:"Trebuchet MS"'> and <span class=SpellE>NXU_Hull.h</span><o:p></o:p></span></u></p>

<p class=MsoNormal><span style='font-family:"Trebuchet MS"'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal><span style='font-family:"Trebuchet MS"'>This is a utility
that generates a convex hull from a point cloud.<o:p></o:p></span></p>

<p class=MsoNormal><span style='font-family:"Trebuchet MS"'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal><span class=SpellE><u><span style='font-family:"Trebuchet MS"'>NXU_PhysicsExport.cpp</span></u></span><u><span
style='font-family:"Trebuchet MS"'> and <span class=SpellE>NXU_PhysicsExport.h</span><o:p></o:p></span></u></p>

<p class=MsoNormal><span style='font-family:"Trebuchet MS"'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal><span style='font-family:"Trebuchet MS"'>This source
extracts the contents of individual SDK objects into <span class=SpellE>NxuStream</span>
descriptors that can be added to an <span class=SpellE>NxuPhysicsCollection</span>.<o:p></o:p></span></p>

<p class=MsoNormal><span style='font-family:"Trebuchet MS"'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal><span class=SpellE><u><span style='font-family:"Trebuchet MS"'>NXU_PhysicsImport.cpp</span></u></span><u><span
style='font-family:"Trebuchet MS"'> and <span class=SpellE>NXU_PhysicsImport.h</span><o:p></o:p></span></u></p>

<p class=MsoNormal><span style='font-family:"Trebuchet MS"'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal><span style='font-family:"Trebuchet MS"'>This source invokes
the stream read routines to load a physics collection into memory.<o:p></o:p></span></p>

<p class=MsoNormal><span style='font-family:"Trebuchet MS"'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal><span class=SpellE><u><span style='font-family:"Trebuchet MS"'>NXU_PhysicsInstantiator.cpp</span></u></span><u><span
style='font-family:"Trebuchet MS"'> and <span class=SpellE>NXU_PhysicsInstantiator.h</span><o:p></o:p></span></u></p>

<p class=MsoNormal><span style='font-family:"Trebuchet MS"'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal><span class=GramE><span style='font-family:"Trebuchet MS"'>This
source instantiates the contents of an <span class=SpellE>NxuPhysicsCollection</span>
into the <span class=SpellE>PhysX</span> SDK.</span></span><span
style='font-family:"Trebuchet MS"'><o:p></o:p></span></p>

<p class=MsoNormal><span style='font-family:"Trebuchet MS"'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal><span class=SpellE><u><span style='font-family:"Trebuchet MS"'>NXU_schemaparse.cpp</span></u></span><u><span
style='font-family:"Trebuchet MS"'> and <span class=SpellE>NXU_schemaparse.h</span><o:p></o:p></span></u></p>

<p class=MsoNormal><u><span style='font-family:"Trebuchet MS"'><o:p><span
 style='text-decoration:none'>&nbsp;</span></o:p></span></u></p>

<p class=MsoNormal><span style='font-family:"Trebuchet MS"'>This is an internal
utility to read the <span class=SpellE>NxuStream</span> XML schema and produce
debugging data.<o:p></o:p></span></p>

<p class=MsoNormal><span style='font-family:"Trebuchet MS"'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal><span class=SpellE><u><span style='font-family:"Trebuchet MS"'>NXU_Stream.cpp</span></u></span><u><span
style='font-family:"Trebuchet MS"'> and <span class=SpellE>NXU_Stream.h</span><o:p></o:p></span></u></p>

<p class=MsoNormal><span style='font-family:"Trebuchet MS"'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal><span style='font-family:"Trebuchet MS"'>This is the main
streaming code that handles both reading and writing all of the contents of an <span
class=SpellE>NxuPhysicsCollection</span><o:p></o:p></span></p>

<p class=MsoNormal><span style='font-family:"Trebuchet MS"'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal><span class=SpellE><u><span style='font-family:"Trebuchet MS"'>NXU_StreamFactory.cpp</span></u></span><u><span
style='font-family:"Trebuchet MS"'> and <span class=SpellE>NXU_StreamFactory.h</span><o:p></o:p></span></u></p>

<p class=MsoNormal><span style='font-family:"Trebuchet MS"'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal><span style='font-family:"Trebuchet MS"'>This is a small
utility to retrieve the appropriate input or output stream interface based on a
particular file type.<o:p></o:p></span></p>

<p class=MsoNormal><span style='font-family:"Trebuchet MS"'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal><span class=SpellE><u><span style='font-family:"Trebuchet MS"'>NXU_Streaming.cpp</span></u></span><u><span
style='font-family:"Trebuchet MS"'> and <span class=SpellE>NXU_Streaming.h</span><o:p></o:p></span></u></p>

<p class=MsoNormal><span style='font-family:"Trebuchet MS"'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal><span style='font-family:"Trebuchet MS"'>This is a small
utility to stream cooked data to and from blocks in memory.<o:p></o:p></span></p>

<p class=MsoNormal><span style='font-family:"Trebuchet MS"'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal><span class=SpellE><u><span style='font-family:"Trebuchet MS"'>NXU_String.cpp</span></u></span><u><span
style='font-family:"Trebuchet MS"'> and <span class=SpellE>NXU_String.h</span><o:p></o:p></span></u></p>

<p class=MsoNormal><span style='font-family:"Trebuchet MS"'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal><span style='font-family:"Trebuchet MS"'>This is a small
utility that keeps track of persistent strings and asset bindings.<o:p></o:p></span></p>

<p class=MsoNormal><span style='font-family:"Trebuchet MS"'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal><span class=SpellE><u><span style='font-family:"Trebuchet MS"'>NXU_tinystr.cpp</span></u></span><u><span
style='font-family:"Trebuchet MS"'> and <span class=SpellE>NXU_tinystr.h</span><o:p></o:p></span></u></p>

<p class=MsoNormal><span style='font-family:"Trebuchet MS"'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal><span style='font-family:"Trebuchet MS"'>This source
provides string <st1:PersonName w:st="on">support</st1:PersonName> for <span
class=SpellE>TinyXML</span><o:p></o:p></span></p>

<p class=MsoNormal><span style='font-family:"Trebuchet MS"'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal><span class=SpellE><u><span style='font-family:"Trebuchet MS"'>NXU_tinyxml.cpp</span></u></span><u><span
style='font-family:"Trebuchet MS"'> and <span class=SpellE>NXU_tinyxml.h</span><o:p></o:p></span></u></p>

<p class=MsoNormal><span style='font-family:"Trebuchet MS"'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal><span style='font-family:"Trebuchet MS"'>This source contains
the core of the <span class=SpellE>TinyXML</span> data structures and API.<o:p></o:p></span></p>

<p class=MsoNormal><span style='font-family:"Trebuchet MS"'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal><span class=SpellE><u><span style='font-family:"Trebuchet MS"'>NXU_tinyxmlerror.cpp</span></u></span><u><span
style='font-family:"Trebuchet MS"'><o:p></o:p></span></u></p>

<p class=MsoNormal><span style='font-family:"Trebuchet MS"'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal><span style='font-family:"Trebuchet MS"'>This source is used
by <span class=SpellE>TinyXML</span> to keep track of the current error state.<o:p></o:p></span></p>

<p class=MsoNormal><span style='font-family:"Trebuchet MS"'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal><span class=SpellE><u><span style='font-family:"Trebuchet MS"'>NXU_tinyxmlparser.cpp</span></u></span><u><span
style='font-family:"Trebuchet MS"'><o:p></o:p></span></u></p>

<p class=MsoNormal><span style='font-family:"Trebuchet MS"'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal><span style='font-family:"Trebuchet MS"'>This source
contains the core XML parsing routines used by <span class=SpellE>TinyXML</span><o:p></o:p></span></p>

<p class=MsoNormal><span style='font-family:"Trebuchet MS"'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal><span class=SpellE><u><span style='font-family:"Trebuchet MS"'>NXU_XMLStream.cpp</span></u></span><u><span
style='font-family:"Trebuchet MS"'> and <span class=SpellE>NXU_XMLStream.h</span><o:p></o:p></span></u></p>

<p class=MsoNormal><span style='font-family:"Trebuchet MS"'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal><span style='font-family:"Trebuchet MS"'>This source
provides <st1:PersonName w:st="on">support</st1:PersonName> to read and write
the contents of an <span class=SpellE>NxuStream</span> XML data file.<o:p></o:p></span></p>

<p class=MsoNormal><span style='font-family:"Trebuchet MS"'><o:p>&nbsp;</o:p></span></p>

</div>

</body>

</html>
